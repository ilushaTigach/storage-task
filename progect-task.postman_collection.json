{
	"info": {
		"_postman_id": "c76c29ec-cf0d-4419-9453-d70b24976c72",
		"name": "progect-task",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "31981914"
	},
	"item": [
		{
			"name": "product",
			"item": [
				{
					"name": "http://localhost:8080/api/v1/products",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Content-Type header is present\", function () {\r",
									"    pm.response.to.have.header(\"Content-Type\");\r",
									"});\r",
									"\r",
									"pm.test(\"Response is an array\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.be.an('array');\r",
									"});\r",
									"\r",
									"pm.test(\"Response has no more than 3 items\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.length).to.be.at.most(3);\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 500ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(500);\r",
									"});\r",
									"\r",
									"pm.test(\"Each item has required fields\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    jsonData.forEach(function (item) {\r",
									"        pm.expect(item).to.have.property('title');\r",
									"        pm.expect(item).to.have.property('article');\r",
									"        pm.expect(item).to.have.property('description');\r",
									"        pm.expect(item).to.have.property('productType');\r",
									"        pm.expect(item).to.have.property('price');\r",
									"        pm.expect(item).to.have.property('quantity');\r",
									"        pm.expect(item).to.have.property('lastModified');\r",
									"        pm.expect(item).to.have.property('createdAd');\r",
									"    });\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:8080/api/v1/products",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"api",
								"v1",
								"products"
							]
						}
					},
					"response": []
				},
				{
					"name": "http://localhost:8080/api/v1/product/{id}",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Content-Type header is present\", function () {\r",
									"    pm.response.to.have.header(\"Content-Type\");\r",
									"});\r",
									"\r",
									"pm.test(\"Response is an object\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.be.an('object');\r",
									"});\r",
									"\r",
									"pm.test(\"Response has required fields\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property('title');\r",
									"    pm.expect(jsonData).to.have.property('article');\r",
									"    pm.expect(jsonData).to.have.property('description');\r",
									"    pm.expect(jsonData).to.have.property('productType');\r",
									"    pm.expect(jsonData).to.have.property('price');\r",
									"    pm.expect(jsonData).to.have.property('quantity');\r",
									"    pm.expect(jsonData).to.have.property('lastModified');\r",
									"    pm.expect(jsonData).to.have.property('createdAd');\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 500ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(500);\r",
									"});\r",
									"\r",
									"pm.test(\"Status code is 404 for non-existent ID\", function () {\r",
									"    if (pm.variables.get(\"nonExistentId\")) {\r",
									"        pm.response.to.have.status(404);\r",
									"    }\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://localhost:8080/api/v1/product/{{profile1}}",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"api",
								"v1",
								"product",
								"{{profile1}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "http://localhost:8080/api/v1/product",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Content-Type header is present\", function () {\r",
									"    pm.response.to.have.header(\"Content-Type\");\r",
									"});\r",
									"\r",
									"pm.test(\"Response is a UUID\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.be.a('string');\r",
									"    pm.expect(jsonData).to.match(/^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$/);\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 500ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(500);\r",
									"});\r",
									"\r",
									"pm.test(\"Status code is 409 for duplicate article\", function () {\r",
									"    if (pm.variables.get(\"duplicateArticle\")) {\r",
									"        pm.response.to.have.status(409);\r",
									"    }\r",
									"});\r",
									"\r",
									"var jsonData = pm.response.json();\r",
									"pm.collectionVariables.set(\"profile1\", jsonData);\r",
									"\r",
									"// var id = JSON.parse(response);\r",
									"// pm.collectionVariables.set(\"profile1\", id);"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"var randomArticle = Math.floor(Math.random() * 1000000).toString();\r",
									"pm.variables.set(\"randomArticle\", randomArticle)"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"title\": \"Watch\",\r\n  \"article\": \"{{randomArticle}}\",\r\n  \"description\": \"A high-end smartphone with advanced features.\",\r\n  \"productType\": \"TECH\",\r\n  \"price\": 100,\r\n  \"quantity\": 100\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:8080/api/v1/product",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"api",
								"v1",
								"product"
							]
						}
					},
					"response": []
				},
				{
					"name": "http://localhost:8080/api/v1/product/{id}",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200 for successful deletion\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 500ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(500);\r",
									"});\r",
									"\r",
									"pm.test(\"Status code is 404 for non-existent ID\", function () {\r",
									"    if (pm.variables.get(\"nonExistentId\")) {\r",
									"        pm.response.to.have.status(404);\r",
									"    }\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "http://localhost:8080/api/v1/product/1d8b0384-e3a8-421d-8329-523aca691821",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"api",
								"v1",
								"product",
								"1d8b0384-e3a8-421d-8329-523aca691821"
							]
						}
					},
					"response": []
				},
				{
					"name": "http://localhost:8080/api/v1/product/{id}",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200 for successful update\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Content-Type header is present\", function () {\r",
									"    pm.response.to.have.header(\"Content-Type\");\r",
									"});\r",
									"\r",
									"pm.test(\"Response is a UUID\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.be.a('string');\r",
									"    pm.expect(jsonData).to.match(/^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$/);\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 500ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(500);\r",
									"});\r",
									"\r",
									"pm.test(\"Status code is 404 for non-existent ID\", function () {\r",
									"    if (pm.variables.get(\"nonExistentId\")) {\r",
									"        pm.response.to.have.status(404);\r",
									"    }\r",
									"});\r",
									"\r",
									"pm.test(\"Status code is 409 for duplicate article\", function () {\r",
									"    if (pm.variables.get(\"duplicateArticle\")) {\r",
									"        pm.response.to.have.status(409);\r",
									"    }\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"title\": \"Juiсу\",\r\n  \"article\": \"ABC-1234\",\r\n  \"description\": \"So good\",\r\n  \"productType\": \"DRINK\",\r\n  \"price\": 600,\r\n  \"quantity\": 200\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:8080/api/v1/product/e8ba2a85-e49d-44f1-9eb5-3c6cb542ea73",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"api",
								"v1",
								"product",
								"e8ba2a85-e49d-44f1-9eb5-3c6cb542ea73"
							]
						}
					},
					"response": []
				}
			]
		}
	],
	"variable": [
		{
			"key": "profile1",
			"value": ""
		}
	]
}